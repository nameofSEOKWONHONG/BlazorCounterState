@page "/"
@using Range = BlazorMonaco.Range

<h3>Code Editor</h3>

<div>
    <div style="margin:10px 0;">
        Theme:
        <select @onchange="ChangeTheme">
            <option value="vs">Visual Studio</option>
            <option value="vs-dark">Visual Studio Dark</option>
            <option value="hc-black">High Contrast Black</option>
        </select>
    </div>
    <div style="margin:10px 0;">
        New Value: <input type="text" @bind="ValueToSet" style="width: 400px;" /> <button @onclick="SetValue">Set Value</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="GetValue">Get Value</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="AddCommand">Add Command (Ctrl+Enter)</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="AddAction">Add Action (Ctrl+D)</button>
    </div>
    <div style="margin:10px 0;">
        See the console for results.
    </div>
</div>

<style>
    .monaco-editor-container { height: 100%; }
</style>

<MonacoEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />

@code {
    private MonacoEditor _editor { get; set; }
    private string ValueToSet { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        int lineHeight = 19;
        var totalHeight = 200;//lineHeight * editor.GetModel().GetAwaiter().GetResult().GetLineCount().GetAwaiter().GetResult();
        
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "sql",
            Value = "",
            Scrollbar = new EditorScrollbarOptions() {
                UseShadows = false,
                Vertical = "Hidden",
                AlwaysConsumeMouseWheel = false,
                VerticalScrollbarSize = 0,
                VerticalSliderSize = 0,
                Horizontal = "Auto"
            },
            ScrollBeyondLastColumn = 0,
            ScrollBeyondLastLine = false,
            GlyphMargin = false,
            Folding = false,
            Contextmenu = false,
            CodeLens = false,
            Minimap = new EditorMinimapOptions() { Enabled = false },
            ReadOnly = false,
            LineNumbers = "on",
            LineDecorationsWidth = "0",
            Lightbulb = new EditorLightbulbOptions() { Enabled = false },
            RenderIndentGuides = false,
            RenderFinalNewline = false,
            RenderValidationDecorations = "off",
            OverviewRulerBorder = false,
            OverviewRulerLanes = 0,
            Theme = "vs-light",
            FixedOverflowWidgets = true,
            LineHeight = lineHeight,
            Dimension = new Dimension { Height = totalHeight },
            ColorDecorators = true,
            OccurrencesHighlight = true,            
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KEY_H, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        // var newDecorations = new ModelDeltaDecoration[]
        // {
        //     new ModelDeltaDecoration
        //     {
        //         Range = new BlazorMonaco.Range(3,1,3,1),
        //         Options = new ModelDecorationOptions
        //         {
        //             IsWholeLine = true,
        //             ClassName = "decorationContentClass",
        //             GlyphMarginClassName = "decorationGlyphMarginClass",
        //         },
        //     }
        // };
        //
        // decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private string[] decorationIds;

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value.ToString()}");
        await MonacoEditor.SetTheme(e.Value.ToString());
    }

    private async Task SetValue()
    {
        Console.WriteLine($"setting value to: {ValueToSet}");
        await _editor.SetValue(ValueToSet);
    }

    private async Task GetValue()
    {
        //var val = await _editor.GetValue();
        var model = await _editor.GetModel();
        var selection = await _editor.GetSelection(); 
        var val = await model.GetValueInRange(new Range(selection.StartLineNumber, selection.StartColumn, selection.EndLineNumber, selection.EndColumn), EndOfLinePreference.CRLF);
        Console.WriteLine($"value is: {val}");
    }

    private async Task AddCommand()
    {
        await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
    }

    private async Task AddAction()
    {
        await _editor.AddAction("testAction", "Test Action", new int[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_D, (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_B }, null, null, "navigation", 1.5, (editor, keyCodes) =>
        {
            Console.WriteLine("Ctrl+D : Editor action is triggered.");
        });
    }
}
